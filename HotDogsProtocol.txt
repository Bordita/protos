                            ðŸŒ­ HotDogs Protocol Version 1.0 ðŸŒ­

1. Introduction

    The HotDogs Protocol Version 1.0 is a binary, TCP-based protocol designed for
    the administration and monitoring of user activity and system metrics
    of a server. It supports authentication, monitoring commands, and 
    administrative operations like configuring buffers or managing users.

Note:

   Unless otherwise noted, the decimal numbers appearing in packet-format
   diagrams represent the length of the corresponding field, in octets. 
   Where a given octet must take on a specific value, the syntax X'hh' is
   used to denote the value of the single octet in that field. 
   When the word 'Variable' is used, it indicates that the corresponding 
   field has a variable length defined either by an associated (one or two octet)
   length field, or by a data type field.

2. Authentication

    Upon establishing a TCP connection, the client must perform an authentication
    handshake using a binary structure:

        +-----+------+----------+------+------------+
        | VER | ULEN |  UNAME   | PLEN |   PASSWD   |
        +-----+------+----------+------+------------+
        |  1  |  1   | 1 to 255 |   1  |  1 to 255  |
        +-----+------+------+-----------------------+

    Where:
        o   VER         Protocol version, currently X'01'.
        o   ULEN        Length of username.
        o   UNAME       Username. This one cannot contain the '\r' character.
        o   PLEN        Length of password.
        o   PASSWD      Password.

    The server verifies the supplied UNAME and PASSWD, and sends the
    following response:

        +-----+-------------+
        | VER | COOK_STATUS |
        +-----+-------------+
        |  1  |      1      |
        +-----+-------------+
    
    A COOK_STATUS field of X'00' indicates success, that is WELL_COOKED.
    If the server returns a `failure' (COOK_STATUS value other than X'00')
    status, it MUST close the connection.

    Other values defined in this version are:
        o   X'01'      UNDERCOOKED             Invalid credentials.
        o   X'02'      BURNT                   Unsupported version.
        o   X'FF'      WHO_LET_BRO_COOK        Generic error.

3. Requests

    After successful authentication, the client may issue RETR or MOD requests
    using the following base format:

        +--------+----------+
        | METHOD | OPTIONS  |
        +--------+----------+
        |   1    |     1    |
        +--------+----------+

    The METHOD values defined in this version are:
        o   X'00'       RETR
        o   X'01'       MOD

    The values for the field options depend on the chosen method.

3.1. RETR Method

    RETR Requests are used to retrieve information from the server.

    The values defined for OPTIONS in this version are:
        o   X'00'       Server metrics
        o   X'01'       List users
        o   X'02'       List connection logs

    Thereafter, the request only requires the METHOD and OPTIONS field.
    No additional fields are needed.

    The response follows the format described in Section 4.1.

3.2. MOD Method

    MOD Requests are used to manage server configurations, such as user
    lists and buffers. 

    The values defined for OPTIONS in this version are:
        o   X'00'       Configure buffer size.
        o   X'01'       Add user.
        o   X'02'       Remove user.

    The response follows the format described in Section 4.2.

    Depending on the value of OPTIONS, the request format varies.

3.2.1. Configure buffer size

    The request format for this option is as follows:

    +--------+----------+-------------+
    | METHOD | OPTIONS  | NEWBUFFSIZE |
    +--------+----------+-------------+
    |  0x01  |   0x00   |      2      |
    +--------+----------+-------------+

    Where NEWBUFFSIZE specifies the new size of the buffer.

3.2.2. Add user

    The request format for this option is as follows:

    +--------+----------+------+----------+------+------------+
    | METHOD | OPTIONS  | ULEN |  UNAME   | PLEN |   PASSWD   |
    +--------+----------+------+----------+------+------------+
    |  0x01  |   0x02   |  1   |  1â€“255   |  1   |   1â€“255    |
    +--------+----------+------+----------+------+------------+

    Where ULEN, UNAME, PLEN and PASSWD fields have the same semantics
    as in authentication handshake described in Section 2.

3.2.3. Remove user

    The request format for this option is as follows:

    +--------+----------+------+----------+
    | METHOD | OPTIONS  | ULEN |  UNAME   |
    +--------+----------+------+----------+
    |  0x01  |   0x03   |  1   |  1â€“255   |
    +--------+----------+------+----------+

    Where ULEN and UNAME fields have the same semantics as in authentication
    handshake described in Section 2.

4. Responses

    The server returns a response that follows the next base format:

    +--------+----------+-------------+
    | METHOD | OPTIONS  | COOK_STATUS |
    +--------+----------+-------------+
    |    1   |    1     |      1      |
    +--------+----------+-------------+

    Where the METHOD and OPTIONS fields replicate their values in the request.
    
    The values defined in this version for COOK_STATUS are:
        o   X'00'   SUCCESS             Operation successful.
        o   X'01'   NO_BUN_FOUND        Invalid method.
        o   X'02'   BAD_TOPPING         Invalid option.
        o   X'03'   NO_SUCH_BUN         User not found.
        o   X'FF'   WHO_LET_BRO_COOK    Generic error.

4.1. RETR Responses

    RETR Response formats vary depending on the type of request.

4.1.1. RETR Metrics Response

    RETR Metrics Requests return a fixed length payload. The response has the following format:

    +--------+----------+-------------+-----------+-----------+-----------+-----------+
    | METHOD | OPTIONS  | COOK_STATUS |  CONN-HS  | CONN-CURR | CONN-FAIL | BYTES-TSF |
    +--------+----------+-------------+-----------+-----------+-----------+-----------+
    |    1   |    1     |      1      |     4     |     4     |     4     |     4     |
    +--------+----------+-------------+-----------+-----------+-----------+-----------+

    Where
        o   CONN-HS     are the historic connections accepted by the server.
        o   CONN-CURR   are the current number of users connected to the server.
        o   CONN-FAIL   are the number of failed connection attempts.
        o   BYTES-TSF   are the number of bytes transfered between server and clients.
    
4.1.2. RETR Users Response

    RETR Users Requests return a response following the next format:

    +--------+----------+-------------+-----------+--------------+
    | METHOD | OPTIONS  | COOK_STATUS | DATA_LEN  |     DATA     |
    +--------+----------+-------------+-----------+--------------+
    |    1   |    1     |      1      |     2     |   Variable   |
    +--------+----------+-------------+-----------+--------------+

    Where DLEN describes the length of the DATA field, which contains all the usernames.
    The DATA field contains each of the usernames null terminated, each separated 
    by a '\r' character.

    See example in Section 5.1.

4.1.3. RETR Logs Response

    RETR Logs Requests return a response following the a format similar to Users Requests:

    +--------+----------+-------------+-----------+--------------+
    | METHOD | OPTIONS  | COOK_STATUS | DATA_LEN  |     DATA     |
    +--------+----------+-------------+-----------+--------------+
    |    1   |    1     |      1      |     2     |   Variable   |
    +--------+----------+-------------+-----------+--------------+

    Where DLEN describes the length of the DATA field, which contains all the logs null terminated.
    As in usernames, each of the logs are separated by a '\r'.

4.2. MOD Responses

    MOD requests involve client-initiated changes (e.g., configuration or user management).
    Each request has a specific structure depending on the selected OPTIONS. 
    In all cases, the server responds with a fixed-size confirmation message. This message
    follows the base format described in Section 4.

5. Examples

    Below are some examples on the protocol usage.

5.1. Request Users

    Client sends a RETR Users request:

        +--------+----------+
        | METHOD | OPTIONS  |
        +--------+----------+
        | 0x00   |  0x01    |
        +--------+----------+

    Server responds:

        +--------+----------+-------------+-----------+--------------------+
        | METHOD | OPTIONS  | COOK_STATUS | DATA_LEN  |        DATA        |
        +--------+----------+-------------+-----------+--------------------+
        | 0x00   |  0x01    |   0x00      |  0x000C   | "alice\0\rbob\0\r" |
        +--------+----------+-------------+-----------+--------------------+

    This response lists two users: "alice" and "bob", each null-terminated and separated by '\r'.

5.2. Modify Buffer

    Client sends a MOD request to change buffer size to 4096:

        +--------+----------+-------------+
        | METHOD | OPTIONS  | NEWBUFFSIZE |
        +--------+----------+-------------+
        |  0x01  |   0x00   |   0x1000    |
        +--------+----------+-------------+

    Server responds:

        +--------+----------+-------------+
        | METHOD |  OPTIONS | COOK_STATUS |
        +--------+----------+-------------+
        |  0x01  |   0x00   |     0x00    |
        +--------+----------+-------------+

    The buffer size was successfully updated.

5.3. Authentication Denied

    Client attempts authentication with invalid credentials:

        +-------+-------+----------+--------+------------+
        | VER   | ULEN  |  UNAME   |  PLEN  |   PASSWD   |
        +-------+-------+----------+--------+------------+
        | 0x01  | 0x05  | "admin"  |  0x04  |   "fail"   |
        +-------+-------+----------+--------+------------+

    Server responds:

        +-------+-------------+
        | VER   | COOK_STATUS |
        +-------+-------------+
        | 0x01  |   0x01      |
        +-------+-------------+

    The COOK_STATUS 0x01 (UNDERCOOKED) indicates invalid credentials. The server closes the connection.

6. Authors

    The HotDogs Protocol was developed by
        + Agustin Ronda         -   64507
        + TomÃ¡s Borda           -   64517
        + Lautaro Paletta       -   64499
        + NicolÃ¡s Arancibia     -   64481 



---
Authors' note: No actual sausages were harmed in the making of this protocol.  

RFC-HOTDOGS-0001 â€” June 2025 
---